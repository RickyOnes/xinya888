export async function onRequest(e){const{request:t,env:s,params:n}=e;let r=n.table;Array.isArray(r)&&(r=r.join("/")),r=r||"";const o=new URL(t.url),a=t.method,i={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization"};if("OPTIONS"===a)return new Response(null,{headers:i});try{const e=s.SUPABASE_URL,n=s.SUPABASE_KEY;if(!e||!n)return new Response(JSON.stringify({error:"Server configuration error",message:"Missing required environment variables"}),{status:500,headers:{"Content-Type":"application/json",...i}});if(!r)return new Response(JSON.stringify({message:"Data API endpoints",available_tables:["sales_records","longqiao_records"],usage:"GET /api/sales_records?select=*"}),{headers:{"Content-Type":"application/json",...i}});const p=t.headers.get("Authorization");if("GET"===a){let t=`${`${e}/rest/v1`}/${r}`;o.search&&(t+=o.search);const s={apikey:n,"Content-Type":"application/json",Authorization:p||`Bearer ${n}`},a=await fetch(t,{method:"GET",headers:s});if(!a.ok){await a.text();return new Response(JSON.stringify({error:"Failed to fetch data",message:`API returned ${a.status}`}),{status:a.status,headers:{"Content-Type":"application/json",...i}})}const l=await a.json();return new Response(JSON.stringify(l),{headers:{"Content-Type":"application/json",...i}})}return new Response(JSON.stringify({error:"Method not implemented",message:`${a} method not yet implemented`}),{status:501,headers:{"Content-Type":"application/json",...i}})}catch(e){return new Response(JSON.stringify({error:"Internal server error",message:e.message}),{status:500,headers:{"Content-Type":"application/json",...i}})}}
