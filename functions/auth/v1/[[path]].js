export async function onRequest(e){const{request:s,env:t,params:n}=e;let a=n.path;Array.isArray(a)&&(a=a.join("/")),a=a||"";const o=s.method,r={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization"};if("OPTIONS"===o)return new Response(null,{headers:r});try{const e=t.SUPABASE_URL,n=t.SUPABASE_KEY;if(!e||!n)return new Response(JSON.stringify({error:"Server configuration error"}),{status:500,headers:{"Content-Type":"application/json",...r}});const i=`${e}/auth/v1`;let p=null;if(["POST","PATCH"].includes(o))try{p=await s.json()}catch(e){return new Response(JSON.stringify({error:"Invalid JSON"}),{status:400,headers:{"Content-Type":"application/json",...r}})}if("login"===a&&"POST"===o){if(!p||!p.email||!p.password)return new Response(JSON.stringify({error:"Missing credentials",message:"Email and password are required"}),{status:400,headers:{"Content-Type":"application/json",...r}});const e=await fetch(`${i}/token?grant_type=password`,{method:"POST",headers:{"Content-Type":"application/json",apikey:n,Authorization:`Bearer ${n}`},body:JSON.stringify({email:p.email,password:p.password})});if(!e.ok){const s=await e.json();return new Response(JSON.stringify({error:"Authentication failed",message:s.error_description||"Invalid credentials"}),{status:e.status,headers:{"Content-Type":"application/json",...r}})}const s=await e.json();return new Response(JSON.stringify(s),{headers:{"Content-Type":"application/json",...r}})}if("signup"===a&&"POST"===o){if(!p||!p.email||!p.password)return new Response(JSON.stringify({error:"Missing required fields",message:"Email and password are required"}),{status:400,headers:{"Content-Type":"application/json",...r}});const e={email:p.email,password:p.password,data:{}};p.phone&&(e.phone=p.phone),p.user_metadata&&(e.data={...e.data,...p.user_metadata});const s=await fetch(`${i}/signup`,{method:"POST",headers:{"Content-Type":"application/json",apikey:n,Authorization:`Bearer ${n}`},body:JSON.stringify(e)});if(!s.ok){const e=await s.json();return new Response(JSON.stringify({error:"Registration failed",message:e.message||"Failed to create account"}),{status:s.status,headers:{"Content-Type":"application/json",...r}})}const t=await s.json();return new Response(JSON.stringify(t),{headers:{"Content-Type":"application/json",...r}})}if("user"===a&&"GET"===o){const e=s.headers.get("Authorization");if(!e)return new Response(JSON.stringify({error:"Missing authorization header"}),{status:401,headers:{"Content-Type":"application/json",...r}});const t=await fetch(`${i}/user`,{method:"GET",headers:{apikey:n,Authorization:e}});if(!t.ok){const e=await t.json();return new Response(JSON.stringify({error:"Failed to get user",message:e.message||"Invalid token"}),{status:t.status,headers:{"Content-Type":"application/json",...r}})}const a=await t.json();return new Response(JSON.stringify(a),{headers:{"Content-Type":"application/json",...r}})}if("logout"===a&&"POST"===o){const e=s.headers.get("Authorization");if(!e)return new Response(JSON.stringify({error:"Missing authorization header"}),{status:401,headers:{"Content-Type":"application/json",...r}});const t=await fetch(`${i}/logout`,{method:"POST",headers:{apikey:n,Authorization:e,"Content-Type":"application/json"}});if(!t.ok){const e=await t.json();return new Response(JSON.stringify({error:"Logout failed",message:e.message||"Failed to sign out"}),{status:t.status,headers:{"Content-Type":"application/json",...r}})}return new Response(JSON.stringify({message:"Successfully signed out"}),{headers:{"Content-Type":"application/json",...r}})}if("reset-password"===a&&"POST"===o){if(!p||!p.email)return new Response(JSON.stringify({error:"Missing email",message:"Email is required for password reset"}),{status:400,headers:{"Content-Type":"application/json",...r}});const e=await fetch(`${i}/recover`,{method:"POST",headers:{"Content-Type":"application/json",apikey:n},body:JSON.stringify({email:p.email,redirectTo:p.redirectTo||`${new URL(s.url).origin}/reset-password`})});if(!e.ok){const s=await e.json();return new Response(JSON.stringify({error:"Password reset failed",message:s.message||"Failed to send reset email"}),{status:e.status,headers:{"Content-Type":"application/json",...r}})}return new Response(JSON.stringify({message:"Password reset email sent successfully"}),{headers:{"Content-Type":"application/json",...r}})}return new Response(JSON.stringify({error:"Auth endpoint not found",message:`Endpoint /auth/v1/${a} not found`,available_endpoints:["POST /auth/v1/login","POST /auth/v1/signup","GET /auth/v1/user","POST /auth/v1/logout","POST /auth/v1/reset-password"]}),{status:404,headers:{"Content-Type":"application/json",...r}})}catch(e){return console.error("Auth Function error:",e),new Response(JSON.stringify({error:"Internal server error",message:e.message}),{status:500,headers:{"Content-Type":"application/json",...r}})}}
